plugins {
    id 'java-library'
    id 'groovy'
    id 'maven-publish'
    id 'jacoco-report-aggregation'
    alias(libs.plugins.shadow)
    alias(libs.plugins.delombok)
}

group = 'it.fulminazzo'
version = '1.0'

repositories {
    mavenCentral()
    maven { url = "https://repo.fulminazzo.it/releases" }
}

dependencies {
    // FulmiCollection
    api libs.fulmicollection

    // Lombok
    compileOnly libs.lombok
    annotationProcessor libs.lombok
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    // JetBrains Annotations
    compileOnly libs.annotations
    testCompileOnly libs.annotations

    testImplementation libs.spock
    testRuntimeOnly libs.byte.buddy
}

test {
    useJUnitPlatform()
}

testCodeCoverageReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = true
    }
}

shadowJar {
    archiveFileName = "${project.name}-${project.version}.jar"
}

jar {
    enabled = true
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.name}-${project.version}-original.jar"
    dependsOn(shadowJar)
    manifest {
        attributes (
                'Manifest-Version': "${rootProject.version}",
                'Main-Class': "${rootProject.group}.${project.name.toLowerCase()}.${project.name}"
        )
    }
}


tasks.register('sourcesJar', Jar) {
    from sourceSets.main.delombokTask
    archiveClassifier = 'sources'
}

tasks.register('javadocJar', Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = rootProject.group
            artifactId = rootProject.name
            version = rootProject.version

            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }

    repositories {
        maven {
            url 'https://repo.fulminazzo.it/releases'
            credentials {
                username = System.getenv('REPO_USERNAME')
                password = System.getenv('REPO_PASSWORD')
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}
